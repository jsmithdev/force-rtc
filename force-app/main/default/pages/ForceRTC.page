<apex:page controller="ForceRTC" sidebar="false" showheader="true" standardstylesheets="false">

<html>
<head>

  <title>Force RTC</title>

    <apex:slds />
    <style>
        html, body {
            width: 100%;
            height; auto;
            background: #B0C4DF;
        }
        h1 {
            text-align: center;
        }
        h4 {
            font-size: 1.2rem !important;
        }
        #remoteVideo {
            max-width: 100%;
        }
        /* todo Show full local as a mirror, then on call add class that animates to this */
        #localVideo {
            max-width: 420px;
        }
        #localVideo.connected {
            z-index: 999;
            position: absolute;
            width: 100%;
            height: 13%;
            margin-left: 21rem;
            margin-top: 21rem;
        }
        .videos {
            text-align: center;
            margin-top: 2rem;
        }
        .actions {
            text-align: center;
            margin-top: 2rem;
        }
        .hide {
            display: none !important;
        }
        #chat {
            width: 100%;
        }
        #create {
            color: white;
        }
        .chatArea {
            margin: auto;
            width: 50%;
            padding-top: 2rem;
        }
        .createArea {
            margin: auto;
            width: 12rem;
            padding-top: 2rem;
        }
        .createButtons {
            margin: auto;
            width: 75%;
        }
        #progress_bar {
            margin: 10px 0;
            padding: 3px;
            border: 1px solid #000;
            font-size: 14px;
            clear: both;
            opacity: 0;
            -moz-transition: opacity 1s linear;
            -o-transition: opacity 1s linear;
            -webkit-transition: opacity 1s linear;
        }
        #progress_bar.loading {
            opacity: 1.0;
        }
        #progress_bar .percent {
            background-color: #4bca81;
            height: auto;
            width: 0;
        }
    </style>
</head>

<body>

<div class="toaster" style="height: 4rem;"></div>

<div class="videos">

    <video id="localVideo" title="You" autoplay="true" muted="true"></video>

    <video id="remoteVideo" autoplay="true" class="hide"></video>
</div>

<div class="createArea center hide">

    <select class="userList" />
    <br />
    <br />
    <div class="createButtons">
        <button id="create" class="slds-button slds-button_success">Create Connection</button>
    </div>
</div>

<div class="chatArea center "><!-- hide -->

    <h4>Peer Chat</h4>
    <br/>
    <div id="div"></div>
    <textarea id="chat" title="Hit enter to send" 
        placeholder="Send text to peer. Press Enter to send."></textarea>

    <br />
    <br />

    <h4>Peer File Transfer</h4>
    <br/>
    <input type="file" id="files" name="file" />
    <button onclick="abortRead();">Cancel read</button>
    <div id="progress_bar"><div class="percent">0%</div></div>

</div>

<div class="">
    <table class="slds-table slds-table_bordered slds-table_cell-buffer">
        <th>Name</th>
        <th>Action</th>
        <tbody class="conns"></tbody>
    </table>
</div>

</body>
    <!-- shim to insulate apps from spec changes and prefix differences.  -->
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

  <script>
    'use strict()'

    const localVideo = document.getElementById('localVideo')
    const remoteVideo = document.getElementById('remoteVideo')
    
    const buttons = {}
    buttons.create = document.getElementById('create')
    buttons.create.onclick = createOffer

    const server = { urls: "stun:stun.l.google.com:19302" }

    const enterPressed = e => e.keyCode == 13
    const log = msg => div.innerHTML += `<p>${msg}</p>`

    const getMedia = navigator.mediaDevices.getUserMedia({video:true, audio:true})
        .then(stream => pc.addStream(localVideo.srcObject = stream))
        .catch(e => mkToast(e, 'error'))

    const haveAnswer = (conn) => {

        //Fix up the answer
        const answer = `${conn.jamiesmith__Answer__c}\r\n`

        const desc = new RTCSessionDescription({ type:"answer", sdp:answer })
        pc.setRemoteDescription(desc)
            .then(x => mkToast('Connected', 'success'))
            .catch(x => mkToast(x, 'warning'))
    }

    const poleForAnswer = (Id) => {

        const getConn = new Promise((resolve, reject) =>
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ForceRTC.getConnection}',
                Id,
                (result, e) => e.status ? resolve(result) : reject(e.message)))
        .then(conn => conn.jamiesmith__Answer__c 
            ? haveAnswer(conn) 
            : setTimeout(() => poleForAnswer(Id), 10000))
        .catch(x => mkToast(x, 'warning'))
    }


    {   // if params, there's a connection made already so get it
        const Id = new URL(location.href).searchParams.get("id")
        if(Id){
            
            const getConn = new Promise((resolve, reject) =>
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ForceRTC.getConnection}',
                    Id,
                    (result, e) => e.status ? resolve(result) : reject(e.message))
            ).then(conn => {

                mkToast('Found Connection. Replying...', 'success')

                //Fix up the offer
                const offer = `${conn.jamiesmith__Offer__c}\r\n`
                
                // set _offer
                const desc = new RTCSessionDescription({ type:"offer", sdp:offer })
                pc.setRemoteDescription(desc)
                    .then(() => pc.createAnswer()).then(d => pc.setLocalDescription(d))
                    .catch(error => mkToast(error, 'error'))
                
                pc.onicecandidate = e => {

                    if (e.candidate){
                        return
                    }

                    // Answer = pc.localDescription.sdp

                    // Set Answer for Peer's pole to pickup
                    const setAnswer = new Promise((resolve, reject) =>
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ForceRTC.setAnswer}',
                            Id,
                            pc.localDescription.sdp,
                            (result, e) => e.status ? resolve(result) : reject(e.message)))
                    .then(x => mkToast('Set Answer. Waiting for peer\'s connection...'))
                    .catch(error => mkToast(error, 'error'))
                }
                
            }).catch(error => mkToast(error, 'error'))
        }
        else {
            
            // Show creation stuff
            document.querySelector('.createArea').classList.remove('hide')

            // This is Client1
            const select = document.querySelector('.userList')
            select.innerHTML = `<option value="">--Select User--</option>`
            // Get potential ClientB's
            const getUsers = new Promise((resolve, reject) =>
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ForceRTC.getUsers}',
                    (result, e) => e.status ? resolve(result) : reject(e.message)))
            .then(x => x.map(u => select.innerHTML += `<option value="${u.Id}">${u.Name}</option>`))
            .catch(error => mkToast(error, 'error'))
        }
    }
    
    const pc = new RTCPeerConnection({ iceServers: [server] })
    pc.onaddstream = e => {
        remoteVideo.srcObject = e.stream
        localVideo.classList.add('hide')
        remoteVideo.classList.remove('hide')
        localVideo.classList.add('connected')
        localVideo.classList.remove('hide')
    }
    
    let dc // data channel for chat
    pc.ondatachannel = e => dcInit(dc = e.channel)
    pc.oniceconnectionstatechange = e => log(pc.iceConnectionState)
    function dcInit() {

        dc.onopen = () => {
            document.querySelector('.chatArea').classList.remove('hide')
            mkToast('Chat available', 'success')
        }
        dc.onmessage = e => log(e.data)
    }
        
    let dcFile // data channel for file
    pc.ondatachannel = e => dcFileInit(dc = e.channel)
    function dcFileInit() {

        dc.onopen = () => {
            document.querySelector('.chatArea').classList.remove('hide')
            mkToast('File available', 'success')
        }
        dc.onmessage = e => mkToast(e.data)
    }

    function createOffer() {
        
        const userId = document.querySelector('.userList').value

        if(userId){
            mkToast('Creating connection.  This may take ~20 seconds.', 'info')
        }
        else {
            mkToast('Select a Peer to Connect to...', 'warning')
            return
        }
        
        dcInit(dc = pc.createDataChannel("chat"))
        dcFileInit(dcFile = pc.createDataChannel("file"))

        getMedia.then(() => pc.createOffer())
            .then(d => pc.setLocalDescription(d))
            .catch(log)
            
        pc.onicecandidate = e => {

            if(e.candidate){
                return
            }

            // offer = pc.localDescription.sdp

            const mkConn = new Promise((resolve, reject) =>
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ForceRTC.mkConnection}',
                    pc.localDescription.sdp,
                    userId,
                    (result, e) => e.status ? resolve(result) : reject(e.message))
            ).then(conn => {
                
                mkToast('Connection created. Waiting for reply...', 'info')

                poleForAnswer(conn.Id)

            }).catch(error => mkToast(error, 'error'))
        }
    }

    chat.onkeypress = e => {
        
        if (!enterPressed(e)){
            return
        }

        dc.send(chat.value)
        log(chat.value)
        chat.value = ''
    }

    const mkToast = (msg, type) => {
        
        const cont = document.createElement('div')
        const toaster = document.querySelector('.toaster')

        cont.innerHTML =  `<div style="height: 4rem;">
            <div class="slds-notify_container slds-is-relative">
                <div class="slds-notify slds-notify_toast slds-theme_${type}" role="alert">
                    <span class="slds-assistive-text">${type}</span>
                    <span class="slds-icon_container slds-icon-utility-${type} slds-m-right_small slds-no-flex slds-align-top" title="Description of icon when needed">
                        <svg class="slds-icon slds-icon_small" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#${type}')}" />
                        </svg>
                    </span>
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small">${msg}</h2>
                    </div>
                    <button class="close slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close">
                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#close')}" />
                        </svg>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                </div>
            </div>
        </div>`
        
        cont.querySelector('.close').onclick = () => toaster.innerHTML = ''
        toaster.innerHTML = ''
        toaster.appendChild(cont.childNodes[0])
    }

    // File uploads
    let reader
    const receiveBuffer = []
    const progress = document.querySelector('.percent')

    function abortRead() {
        reader.abort()
    }

    function errorHandler(evt) {
        switch(evt.target.error.code) {
            case evt.target.error.NOT_FOUND_ERR:
                mkToast('File Not Found!', 'error')
                break
            case evt.target.error.NOT_READABLE_ERR:
                mkToast('File is not readable', 'error')
                break
            case evt.target.error.ABORT_ERR :
                break
            default:
                mkToast('An error occurred reading this file.', 'error')
        }
    }

    function updateProgress(evt) {
        // evt is a ProgressEvent
        if (evt.lengthComputable) {
            const percentLoaded = Math.round((evt.loaded / evt.total) * 100)
            // Increase the progress bar length.
            if (percentLoaded < 100) {
                progress.style.width = `${percentLoaded}%`
                progress.textContent = `${percentLoaded}%`
            }
        }
    }

    function handleFileSelect(evt) {

        progress.style.width = '0%' // Reset progress indicator on new file selection.
        progress.textContent = '0%'

        reader = new FileReader()
        reader.onerror = errorHandler
        reader.onprogress = updateProgress
        reader.onabort = function(e) {
            mkToast('File read cancelled', 'warning')
        };
        reader.onloadstart = function(e) {
            document.getElementById('progress_bar').className = 'loading';
        };
        reader.onload = function(e) {
            // Ensure that the progress bar displays 100% at the end.
            progress.style.width = '100%'
            progress.textContent = '100%'
            setTimeout("document.getElementById('progress_bar').className='';", 2000)
        }

        // Read in the image file as a binary string.
        reader.readAsBinaryString(evt.target.files[0]);
    }

    document.getElementById('files').addEventListener('change', handleFileSelect, false);

    function onReceiveMessageCallback(event) {
        console.log('Received Message ' + event.data.byteLength)
        receiveBuffer.push(event.data);
        receivedSize += event.data.byteLength;

        receiveProgress.value = receivedSize;

        // we are assuming that our signaling protocol told
        // about the expected file size (and name, hash, etc).
        var file = fileInput.files[0];
        //if (receivedSize === file.size) {
            const received = new window.Blob(receiveBuffer)
            receiveBuffer = []

            downloadAnchor.href = URL.createObjectURL(received);
            downloadAnchor.download = 'file.name' // file.name
            downloadAnchor.textContent =
            'Click to download \'' + file.name + '\' (' + file.size + ' bytes)';
            downloadAnchor.style.display = 'block';

            var bitrate = Math.round(receivedSize * 8 /
                ((new Date()).getTime() - timestampStart));
            bitrateDiv.innerHTML = '<strong>Average Bitrate:</strong> ' +
                bitrate + ' kbits/sec (max: ' + bitrateMax + ' kbits/sec)';

            if (statsInterval) {
            window.clearInterval(statsInterval);
            statsInterval = null;
            }

            closeDataChannels();
        //}
    }

    {   
        const tb = document.querySelector('.conns')
        const getUserConnections = new Promise((resolve, reject) =>
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ForceRTC.getUserConnections}',
                (result, e) => e.status ? resolve(result) : reject(e.message)))
        .then(conns => {
            console.dir(conns)
            conns.map(x => x.Answer__c
                ? tb.innerHTML += 
                    `<tr><td>${x.Name}</td><td><a href="${location.origin}/apex/ForceRTC?id=${x.Id}">Old</a></td></tr>`
                : tb.innerHTML += 
                    `<tr><td>${x.Name}</td><td><a href="${location.origin}/apex/ForceRTC?id=${x.Id}">Join</a></td></tr>`
            )
        })
        .catch(error => mkToast(error, 'error'))

        getUserConnections
    }
  </script>

  </html>

</apex:page>